spring:
  main:
    allow-bean-definition-overriding: true
    allow-circular-references: true
  application:
    name: auth-service
    version: ${VERSION:#@version@#}
  datasource:
    url: jdbc:mysql://${mysql.host:localhost}:${mysql.port:3306}/${mysql.database:database}?allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai
    username: ${mysql.username:root}
    password: ${mysql.password:root}
    druid:
      driver-class-name: com.mysql.cj.jdbc.Driver
      db-type: mysql
      enable: true
      password: ${mysql.password:root}
      username: ${mysql.username:root}
      # 初始化连接大小
      initial-size: 10
      # 最小空闲连接数
      min-idle: 5
      max-active: 20
      max-wait: 30000
      # 可关闭的空闲连接间隔时间
      time-between-eviction-runs-millis: 60000
      # 配置连接在池中的最小生存时间
      min-evictable-idle-time-millis: 300000
      validation-query: select '1' from dual
      test-while-idle: true
      test-on-borrow: true
      test-on-return: false
      #关闭长时间不使用的连接
      remove-abandoned: true
      remove-abandoned-timeout: 1800
      log-abandoned: true
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: false
      max-open-prepared-statements: 20
      max-pool-prepared-statement-per-connection-size: 20
  jackson:
    time-zone: Asia/Shanghai
    date-format: yyyy-MM-dd HH:mm:ss
  redis:
    database: ${redis.database:0}
    host: ${redis.host:localhost}
    password: ${redis.password:root}
    port: ${redis.port:6379}
    timeout: 5000
    lettuce:
      pool:
        max-idle: 20
        max-wait: -1
        min-idle: 0
        max-active: 200
  sleuth:
    # 遗弃掉redis的信息否则会导致使用KeyspaceEventMessageListener的应用无法启动完成
    redis:
      legacy:
        enabled: true
  rabbitmq:
    host: ${rbmq.host:localhost}
    port: ${rbmq.port:5672}
    username: ${rbmq.username:guest}
    password: ${rbmq.password:guest}
  cloud:
    sentinel:
      log:
        dir: ./logs
    function:
      definition: submitProcessResult
    stream:
      bindings:
        baseConfigProcess-out-0:
          destination: baseConfigProcess
        socketProcess-out-0:
          destination: socketProcess
        authActionProcess-out-0:
          destination: authActionProcess
          group: auth-servcie
        submitProcessResult-in-0:
          destination: submitProcessResult
        submitProcess-out-0:
          destination: submitProcess
          group: process-service
        operateLogProcess-out-0:
          destination: operateLogProcess
          group: logging-service
        authLogProcess-out-0:
          destination: authLogProcess
          group: logging-service

# server配置
server:
  port: ${app.server-port}
  shutdown: graceful
  servlet:
    context-path: ${app.context-path}
    encoding:
      force: true
      charset: UTF-8
      enabled: true
  undertow:
    buffer-size: 1024
    direct-buffers: true
    threads:
      io: 4
      worker: 56
  # 使其获取请求协议使用远程的,nginx代理需要设置:proxy_set_header X-Forwarded-Proto $scheme;
  # forward-headers-strategy: framework


# 分布式事务seata配置
seata:
  config:
    type: nacos
    nacos:
      server-addr: ${spring.cloud.nacos.server-addr}
      group: ${spring.cloud.nacos.config.group:DEFAULT_GROUP}
      namespace: ${spring.cloud.nacos.config.namespace}
      username: ${spring.cloud.nacos.username}
      password: ${spring.cloud.nacos.password}
      data-id: seata.properties
  registry:
    type: nacos
    nacos:
      server-addr: ${spring.cloud.nacos.server-addr}
      group: ${spring.cloud.nacos.discovery.group:DEFAULT_GROUP}
      namespace: ${spring.cloud.nacos.discovery.namespace}
      username: ${spring.cloud.nacos.username}
      password: ${spring.cloud.nacos.password}
      cluster: DEFAULT
  tx-service-group: my_test_tx_group
  application-id: ${spring.application.name}
  service:
    vgroup-mapping:
      tx-service-group: DEFAULT


# 开启监控
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always
  info:
    java:
      enabled: true


# 日志
logging:
  level:
    root: ${app.log-root-level:debug}
    indi.zxiaozhou: ${app.log-package-level:debug}
    com.alibaba.nacos: error
  # 生成日志文件路径(注释不会生成)
  pattern:
    dateformat: yyyy-MM-dd HH:mm:ss
  file:
    name: ./logs/${spring.application.name}.log
  logback:
    rollingpolicy:
      max-history: 7
  register-shutdown-hook: true
debug: true


# mybatis
mybatis-plus:
  # mapper.xml路径
  mapper-locations: classpath*:indi/zxiaozhou/skillfull/*/modules/*/mapper/xml/*Mapper.xml
  # 实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: indi.zxiaozhou.skillfull.*.modules.*.entity
  global-config:
    banner: false
    db-config:
      # 主键类型(使用snowflake id)
      id-type: ASSIGN_ID
      # 字段插入判断策略
      insert-strategy: not_empty
      # 字段更新判断策略
      update-strategy: not_null
      # 字段查询判断策略
      where-strategy: not_empty
  configuration:
    # 配置数据库驼峰与下划线互转
    map-underscore-to-camel-case: true
    cache-enabled: false


# security
security:
  # 令牌放入请求头key
  token-header-key: Authorization
  # 请求头令牌前缀
  token-header-start-with: 'Bearer '
  # 令牌类型
  token-type: Bearer
  # token地址key
  token-query-key: access-token
  # 令牌过期时间(单位:秒)
  token-validity-in-seconds: 36000000
  # 触发续期检测最小时间(单位:秒)
  token-detect-in-seconds: 1800
  # 续期时间(单位:秒)
  token-renew-in-seconds: 3600
  # 请求头刷新token标识
  refresh-token-key: refresh-token
  # 数据解密密钥key
  security-key: security
  # 数据密文key
  security-cipher-key: data
  # 请求头刷新密钥标识
  refresh-security-key: refresh-security
  # 验证码有效时间(单位:秒)
  code-validity-in-seconds: 300
  # 打开鉴权
  open-auth: true
  # 打开登录错误限制
  open-auth-login-error-limit: false
  # 最大允许登录错误次数(当打开登录错误限制时使用),默认3次
  max-login-error-num: 3
  # 是否单设备登录:true-单设备，false-多设备登录
  one-equipment-login: false
  # 非正式环境
  no-pro-white-list:
    - /v3/api-docs/**
    - /swagger-ui/**
    - /swagger-ui.html
    - /file/**
    - /druid/**
    - /actuator/**
  # 正式环境白名单
  pro-white-list:
    - /v3/api-docs/**
    - /swagger-ui/**
    - /swagger-ui.html
    - /file/**
    - /druid/**
    - /actuator/**


# api文档配置
springdoc:
  version: ${spring.application.version}
  api-prefix: /api${app.context-path} # api接口调试地址前缀(不需要写请求协议,浏览器自动拼接)
  headers:
    - skill-full-token
    - Authorization
  title: ${spring.application.name}服务
  contact-email: z7630853@163.com
  contact-user: zxiaozhou
  api-docs:
    enabled: ${app.enable-doc:false}
  packages-to-scan: indi.zxiaozhou.skillfull
  swagger-ui:
    enabled: ${app.enable-doc:false}